name: Build and Deploy Company Portal

on:
    push:
        branches:
            - staging
            - main
        tags:
            - "v*"

env:
    DOCKER_IMAGE_NAME: company-portal
    DOCKER_REGISTRY: docker.io

jobs:
    build-and-push-docker-image:
        runs-on: ubuntu-latest
        environment:
            name: production

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=semver,pattern={{version}}
                      type=semver,pattern={{major}}.{{minor}}
                      type=raw,value=latest,enable={{is_default_branch}}
                      type=sha,prefix={{branch}}-

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./mist/docker/Dockerfile
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  platforms: linux/amd64

    deploy-to-server:
        name: Deploy to Server via SSH with Docker Compose
        runs-on: ubuntu-latest
        needs: build-and-push-docker-image
        environment:
            name: production

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Deploy over SSH
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: ${{ secrets.SERVER_PORT || 22 }}
                  script: |
                      echo "Starting deployment for Company Portal Backend..."

                      # Navigate to project directory
                      cd ${{ secrets.DEPLOY_PATH || '/opt/company-portal' }}

                      # Pull latest code
                      echo "Pulling latest code..."
                      git pull origin ${{ github.ref_name }}

                      # Login to Docker Hub
                      echo "Logging in to Docker Hub..."
                      echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

                      # Create uploads directory if not exists
                      echo "Ensuring uploads directory exists..."
                      mkdir -p /root/dot/uploads

                      # Check if .env file exists
                      if [ ! -f /root/dot/.env ]; then
                          echo "Warning: /root/dot/.env file not found!"
                          echo "Please create /root/dot/.env file with required environment variables"
                          exit 1
                      fi

                      # Navigate to docker directory
                      cd mist/docker

                      # Set environment variables for docker-compose
                      export DOCKER_IMAGE="${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.ref_name }}"

                      # Pull latest image
                      echo "Pulling latest Docker image: $DOCKER_IMAGE"
                      docker pull $DOCKER_IMAGE

                      # Stop and remove old containers
                      echo "Stopping existing containers..."
                      docker-compose down

                      # Run database migrations
                      echo "Running database migrations..."
                      docker-compose run --rm app pnpm prisma migrate deploy || echo "Migration skipped or failed"

                      # Start new containers
                      echo "Starting new containers..."
                      docker-compose up -d

                      # Clean up old images
                      echo "Cleaning up old Docker images..."
                      docker image prune -af --filter "until=24h" || true

                      # Check container status
                      echo "Checking container status..."
                      docker-compose ps

                      # Show logs
                      echo "Container logs:"
                      docker-compose logs --tail=50

                      echo "Deployment complete!"
